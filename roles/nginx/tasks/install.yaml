- name: create service user
  user:
    name: "{{ nginx_run_user }}"
    state: present

- name: ensure install dir is exists
  file:
    path: "{{ nginx_install_dir }}"
    state: directory
    owner: "{{ nginx_run_user }}"
    group: "{{ nginx_run_user }}"

- name: check nginx is installed or not
  stat:
    path: "{{ nginx_install_dir }}/sbin/nginx"
  register: nginx_status

- name: ensure build dir is exists
  file:
    path: "{{ nginx_build_dir }}"
    state: directory
    recurse: true
  when: not nginx_status.stat.exists 

- name: download nginx
  unarchive:
    src: "{{ nginx_download_url }}"
    dest: "{{ nginx_build_dir }}"
    remote_src: yes
  when: not nginx_status.stat.exists 

- name: download ngx_http_proxy_connect_module
  unarchive:
    src: "{{ nginx_module_http_proxy_connect_download_url }}"
    dest: "{{ nginx_build_dir }}"
    remote_src: yes
  when: not nginx_status.stat.exists 

- name: download nginx-module-vts
  unarchive:
    src: "{{ nginx_module_vts_download_url }}"
    dest: "{{ nginx_build_dir }}"
    remote_src: yes
  when: not nginx_status.stat.exists 

- name: patch nginx
  shell:
    cmd: "patch -p1 < {{ nginx_build_dir }}/ngx_http_proxy_connect_module-master/patch/proxy_connect_rewrite_102101.patch"
    chdir: "{{ nginx_build_dir }}/nginx-{{ nginx_version }}"
  when: not nginx_status.stat.exists 

- name: configure nginx
  shell:
    chdir: "{{ nginx_build_dir }}/nginx-{{ nginx_version }}"
    cmd: "./configure --prefix={{ nginx_install_dir }} --user={{ nginx_run_user }} --group={{ nginx_run_group }} --with-http_v2_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-stream --with-stream_ssl_module --with-stream_realip_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_sub_module --with-http_sub_module --with-stream_ssl_preread_module --with-debug --add-module={{ nginx_build_dir }}/nginx-module-vts-master --add-module={{ nginx_build_dir }}/ngx_http_proxy_connect_module-master"
  when: not nginx_status.stat.exists 

- name: build nginx
  make:
    chdir: "{{ nginx_build_dir }}/nginx-{{ nginx_version }}"
    params: 
      --jobs: 8
      BUILD_TLS: yes
  when: not nginx_status.stat.exists

- name: install nginx
  make:
    chdir: "{{ nginx_build_dir }}/nginx-{{ nginx_version }}"
    target: install
  when: not nginx_status.stat.exists

- name: change install directory permission
  file:
    path: "{{ nginx_install_dir }}"
    owner: "{{ nginx_run_user }}"
    group: "{{ nginx_run_user }}"
    state: directory
    recurse: true
  when: not nginx_status.stat.exists

- name: delete all build files
  file:
    path: "{{ nginx_build_dir }}"
    state: absent
